
txt

public class Nodo {

    public Nodo izq;
    public Nodo der;
    public String cad;
    public int frecuencia;

    //Constructor del Nodo
    public Nodo(String cad,int frecuencia) {
        izq = der = null;
        this.cad = cad; 
        this.frecuencia = frecuencia;
    }
    
}


public class ListaArreglo_Arbol {
    public static final int MAX = 50;
    
    //atributos
    private Arbol[] v;
    
    
    //Constructor
    public ListaArreglo_Arbol() {
        v = new Arbol[MAX];
        for (int i = 1; i < MAX; i++) {
            v[i] = new Arbol();
        }
    }
    
    //Inserta la cadena, en la respectiva posicion del vector para el arbol
    public void insertar(String cad){
        int cantidad;
        cantidad = cad.length();
        v[cantidad].insertar(cad);
    }
    
    
    public void CargarPalabra(String cadena){
        int cantidad = cadena.length();
        v[cantidad].insertar(cadena);
    }
    
    //Me muestra el arbol, en el vector dado la posicion para verlo
    public void Mostrar(int pos){
        v[pos].inOrden();
        System.out.println("-----------------------------------------------");
    }
    
    public void modificar_A_Minuscula(int pos){
        v[pos].modificarLetrasMinuscula();
    }
  
    
    public static void main(String[] args) {
        ListaArreglo_Arbol liA1 =  new ListaArreglo_Arbol();
        
        liA1.insertar("ab");
        liA1.insertar("abc");
        liA1.insertar("pqr");
        liA1.insertar("ab");
        liA1.insertar("a");
        liA1.insertar("u");
        liA1.insertar("e");
        liA1.insertar("o");
        liA1.insertar("i");
        liA1.insertar("abcd");//1
        liA1.insertar("xyz");
        liA1.insertar("xxyz");//2
        liA1.insertar("xyyx");//3
        liA1.insertar("aei");
        liA1.insertar("ab");
        liA1.insertar("pqr");
        liA1.insertar("abcd");//4
        liA1.insertar("bcde");//5
        liA1.insertar("abcd");//6
        liA1.insertar("a");
        

        liA1.Mostrar(1);


//        liA1.modificar_A_Minuscula(3);
//        liA1.Mostrar(3);
        
        
    }
}




import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;

/**
 *
 * @author USER
 */
public class LeerArchivoTexto {
      private String texto;
      public FileReader archivoCargado;

    public LeerArchivoTexto() {
        this.texto = "";
        archivoCargado = null;
    }

    public void dividirTokens() {
        StringTokenizer tokenizer = new StringTokenizer(texto, ",. ");

        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            System.out.println(token);
        }
    }
    
    
    public void leerArchivoTxt(String ubicacionTxt,ListaArreglo_Arbol lA ){
        FileReader archivo;
        BufferedReader lector;
        try {
            archivoCargado = new FileReader(ubicacionTxt);
            if (archivoCargado.ready()) {
                lector = new BufferedReader(archivoCargado);
                while ((texto = lector.readLine()) != null) {

                  // Crear un objeto StringTokenizer con el delimitador ","
                    StringTokenizer tokenizer1 = new StringTokenizer(texto, ",.;: ");
                    
                    
                    // Iterar a través de los tokens y mostrarlos
                    while (tokenizer1.hasMoreTokens() ) {
                        String token = tokenizer1.nextToken();
                        
                        //Carga la palabra en el respectiva posicion del Arrreglo del Arbol..
                        lA.CargarPalabra(token);  
             
                        //System.out.println(token);
                        
                    }
//                    System.out.println(cadena);
                }
            } else {
                System.out.println("El archivo no esta listo para ser leido....");
            }
        } catch (Exception e) {
            System.out.println("Error...");
        }
    }

    

}


package ProyectoExamenEd2Arboles_3_p1;

/**
 *
 * @author pumar
 */
public class Arbol {

    public Nodo raiz;

    //constructo
    public Arbol() {
        raiz = null;
    }

    //Si devulve un -1 es que no pillo la posicion "Metodo Vector Exclusivo para insertar"
    private int obtenerPosicion(String cad) {
        String abecedario = "abcdefghigklmnopqrstuvwxyz";
        int contador = -1;
        for (int i = 0; i < abecedario.length(); i++) {
            if (cad.charAt(0) == abecedario.charAt(i)) {
                contador = i;
                break;
            }
        }
        if (contador > -1) {
            return contador;
        } else {
            return -1;
        }
    }

    //inserta una nuecva cadena en el arbol, caso constrario si existe no aumento sino suma +1 la frecuencia
    public void insertar(String cadena) {
        boolean bandera = existeNodoCadena(cadena);
        if (bandera) {
            ModificarNodo(cadena);
        } else {
            raiz = insertar(raiz, cadena);
        }

    }

    //Modifica el Nodo, para incrementar la frecuencia
    public void ModificarNodo(String cadena) {
        raiz = modificarArbol(raiz, cadena);
    }

    //Retorna el puntero Nodo modificado
    public Nodo modificarArbol(Nodo p, String cadena) {
        String c = p.cad;
        if (c.equals(cadena)) {
            p.frecuencia++;
        } else {
            int pos1, pos2;
            pos1 = obtenerPosicion(cadena);
            pos2 = obtenerPosicion(p.cad);
            if (pos1 < pos2) {
                p.izq = modificarArbol(p.izq, cadena);

            } else {
                p.der = modificarArbol(p.der, cadena);
            }
        }
        return p;
    }

    //Inserta una nueva cadena, en el Arbol
    public Nodo insertar(Nodo p, String cadena) {
        if (p == null) {
            return new Nodo(cadena, 1);
        } else {
            int pos1, pos2;
            pos1 = obtenerPosicion(cadena);
            pos2 = obtenerPosicion(p.cad);
            if (pos1 < pos2) {
                p.izq = insertar(p.izq, cadena);
            } else {
                p.der = insertar(p.der, cadena);
            }
            return p;
        }

    }

    //Verifica si el Nodo cadena Existe
    public boolean existeNodoCadena(String cadena) {
        return existeNodoCadena(raiz, cadena);
    }

    private boolean existeNodoCadena(Nodo p, String cadena) {
        if (p == null) {
            return false;
        }
        String c = p.cad;
        
        if (c.equals(cadena)) {
            return true;
        }
        int pos1, pos2;
        pos1 = obtenerPosicion(cadena);
        pos2 = obtenerPosicion(p.cad);
        if (pos1 < pos2) {
            return existeNodoCadena(p.izq, p.cad);
        } else {
            return existeNodoCadena(p.der, p.cad);
        }
    }

    //Muestra el resutado mas la frecuencia
    public void inOrden() {
        inOrden(raiz);
    }

    public void inOrden(Nodo p) {
        if (p == null) {
            return;
        } else {
            inOrden(p.izq);
            System.out.println("Dato: " + p.cad + "| " + "Frecuencia: " + p.frecuencia);
            inOrden(p.der);
        }
    }

    /*convertir mayuscula en minuscula*/
    private String convertirAMinuscula(String cadena) {
        char[] caracteres = cadena.toCharArray();

        for (int i = 0; i < caracteres.length; i++) {
            // Verificar si el carácter está en mayúscula
            if (Character.isUpperCase(caracteres[i])) {
                // Convertir el carácter a minúscula
                caracteres[i] = Character.toLowerCase(caracteres[i]);
            }
        }

        // Crear una nueva cadena con los caracteres convertidos
        String cadenaMinuscula = new String(caracteres);
        return cadenaMinuscula;
    }

    public static boolean esMinuscula(String cadena) {
        for (int i = 0; i < cadena.length(); i++) {
            // Verificar si algún carácter no es una letra minúscula
            if (!Character.isLowerCase(cadena.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    public void modificarLetrasMinuscula() {
        raiz = modificarLetrasMinuscula(raiz);
    }

    /*Modifica el elemento a Minuscula*/
    public Nodo modificarLetrasMinuscula(Nodo p) {
        if (p == null) {
            String cad = "";
            if(!esMinuscula(p.cad)){
                cad = convertirAMinuscula(p.cad);
            }
            p.cad = cad;
        } else {
            p.izq = modificarLetrasMinuscula(p.izq);
            p.der = modificarLetrasMinuscula(p.der);
            String cad = convertirAMinuscula(p.cad);
            p.cad = cad;
        }
        return p;
    }

}
----------------------------------------------------------------------------------------------------------------------

CCAAAADDDEENNAS
public class ListaArbol {
    
    public static final int MAX = 50;
    
    //atributos
    private Arbol[] v;
    
    
    //Constructor
    public ListaArbol() {
        v = new Arbol[MAX];
        for (int i = 1; i < MAX; i++) {
            v[i] = new Arbol();
        }
    }
    
    //Inserta la cadena, en la respectiva posicion del vector para el arbol
    public void insertar(String cad){
        int cantidad;
        cantidad = cad.length();
        v[cantidad].insertar(cad);
    }
    
    //Me muestra el arbol, en el vector dado la posicion para verlo
    public void Mostrar(int pos){
        v[pos].inOrden();
    }
    
//    public void modificar_A_Minuscula(int pos){
//        v[pos].modificarLetrasMinuscula();
//    }
  
    
    public static void main(String[] args) {
        ListaArbol liA1 =  new ListaArbol();
        
        liA1.insertar("ab");
        liA1.insertar("abc");
        liA1.insertar("abc");
        liA1.insertar("abc");
        liA1.insertar("pqr");
        liA1.insertar("ab");
        liA1.insertar("a");
        liA1.insertar("u");
        liA1.insertar("e");
        liA1.insertar("o");
        liA1.insertar("i");
        liA1.insertar("abcd");//1
        liA1.insertar("xyz");
        liA1.insertar("xxyz");//2
        liA1.insertar("xyyx");//3
        liA1.insertar("aei");
        liA1.insertar("ab");
        liA1.insertar("pqr");
        liA1.insertar("abcd");//4
        liA1.insertar("bcde");//5
        liA1.insertar("abcd");//6
        liA1.insertar("a");
        liA1.insertar("a");
        

        liA1.Mostrar(3);


        
        
    }
}


public class Arbol {

    public Nodo raiz;

    //constructo
    public Arbol() {
        raiz = null;
    }

    //Si devulve un -1 es que no pillo la posicion "Metodo Vector Exclusivo para insertar"
    private int obtenerPosicion(String cad) {
        String abecedario = "abcdefghigklmnopqrstuvwxyz";
        int contador = -1;
        for (int i = 0; i < abecedario.length(); i++) {
            if (cad.charAt(0) == abecedario.charAt(i)) {
                contador = i;
                break;
            }
        }
        if (contador > -1) {
            return contador;
        } else {
            return -1;
        }
    }

    //inserta una nuecva cadena en el arbol, caso constrario si existe no aumento sino suma +1 la frecuencia
    public void insertar(String cadena) {
        boolean bandera = existeNodoCadena(cadena);
        if (bandera) {
            ModificarNodo(cadena);
        } else {
            raiz = insertar(raiz, cadena);
        }

    }

    //Modifica el Nodo, para incrementar la frecuencia
    public void ModificarNodo(String cadena) {
        raiz = modificarArbol(raiz, cadena);
    }

    //Retorna el puntero Nodo modificado
    public Nodo modificarArbol(Nodo p, String cadena) {
        if (p.cad == cadena) {
            p.frecuencia++;
        } else {
            int pos1, pos2;
            pos1 = obtenerPosicion(cadena);
            pos2 = obtenerPosicion(p.cad);
            if (pos1 < pos2) {
                p.izq = modificarArbol(p.izq, cadena);

            } else {
                p.der = modificarArbol(p.der, cadena);
            }
        }
        return p;
    }

    //Inserta una nueva cadena, en el Arbol
    public Nodo insertar(Nodo p, String cadena) {
        if (p == null) {
            return new Nodo(cadena, 1);
        } else {
            int pos1, pos2;
            pos1 = obtenerPosicion(cadena);
            pos2 = obtenerPosicion(p.cad);
            if (pos1 < pos2) {
                p.izq = insertar(p.izq, cadena);
            } else {
                p.der = insertar(p.der, cadena);
            }
            return p;
        }

    }

    //Verifica si el Nodo cadena Existe
    public boolean existeNodoCadena(String cadena) {
        return existeNodoCadena(raiz, cadena);
    }

    private boolean existeNodoCadena(Nodo p, String cadena) {
        if (p == null) {
            return false;
        }
        if (cadena == p.cad) {
            return true;
        }
        int pos1, pos2;
        pos1 = obtenerPosicion(cadena);
        pos2 = obtenerPosicion(p.cad);
        if (pos1 < pos2) {
            return existeNodoCadena(p.izq, p.cad);
        } else {
            return existeNodoCadena(p.der, p.cad);
        }
    }

    //Muestra el resutado mas la frecuencia
    public void inOrden() {
        inOrden(raiz);
    }

    public void inOrden(Nodo p) {
        if (p == null) {
            return;
        } else {
            inOrden(p.izq);
            System.out.println("Dato: " + p.cad + "| " + "Frecuencia: " + p.frecuencia);
            inOrden(p.der);
        }
    }
/*
    //convertir mayuscula en minuscula
    private String convertirAMinuscula(String cadena) {
        char[] caracteres = cadena.toCharArray();

        for (int i = 0; i < caracteres.length; i++) {
            // Verificar si el carácter está en mayúscula
            if (Character.isUpperCase(caracteres[i])) {
                // Convertir el carácter a minúscula
                caracteres[i] = Character.toLowerCase(caracteres[i]);
            }
        }

        // Crear una nueva cadena con los caracteres convertidos
        String cadenaMinuscula = new String(caracteres);
        return cadenaMinuscula;
    }

    public static boolean esMinuscula(String cadena) {
        for (int i = 0; i < cadena.length(); i++) {
            // Verificar si algún carácter no es una letra minúscula
            if (!Character.isLowerCase(cadena.charAt(i))) {
                return false;
            }
        }
        return true;
    }
    */
/*
    public void modificarLetrasMinuscula() {
        raiz = modificarLetrasMinuscula(raiz);
    }

    //Modifica el elemento a Minuscula
    public Nodo modificarLetrasMinuscula(Nodo p) {
        if (p == null) {
            String cad = "";
            if(!esMinuscula(p.cad)){
                cad = convertirAMinuscula(p.cad);
            }
            p.cad = cad;
        } else {
            p.izq = modificarLetrasMinuscula(p.izq);
            p.der = modificarLetrasMinuscula(p.der);
            String cad = convertirAMinuscula(p.cad);
            p.cad = cad;
        }
        return p;
    }
  */

}

-------------------------------------------------------------------------------------------


public class Nodo {
    public Nodo izq;
    public Nodo der;
    public int elem1;
    public int elem2;

    public Nodo(int elem1,int elem2) {
        izq = der = null;
        this.elem1 = elem1;
        this.elem2 = elem2;
    }
    
}


public class ListaArreglo {

    public static final int MAX = 50;
    //atributos
    private int[] v;
    private int cant;

    //Constructor
    public ListaArreglo() {
        this.cant = 0;
        v = new int[MAX];
    }

    public void insertar1en1(int ele) {
        this.cant++;
        v[cant] = ele;
    }

    public void intercambiar(int i, int j) {
        if (i >= 1 && i <= this.cant && j >= 1 && j <= this.cant) {
            int aux;
            aux = v[i];
            v[i] = v[j];
            v[j] = aux;
        }
    }

    public int obtenerCant() {
        return cant;
    }

    public int obtenerElemento(int pos) {
        return v[pos];
    }

    public int frecuencia(int x) {
        int contador = 0;
        for (int i = 1; i <= this.cant; i++) {
            if (v[i] == x) {
                contador++;
            }
        }
        return contador;
    }

    
    public void ordenarAscendente() {
        for (int i = 1; i < this.cant; i++) {
            for (int j = i + 1; j <= this.cant; j++) {
                if (v[i] > v[j]) {
                    intercambiar(i, j);
                }
            }
        }
    }

    
    public void MetodoAuxiliar1(ListaArreglo l2, ListaArreglo l3) {
        boolean bandera;
        int cantidad;
        for (int i = 1; i <= cant; i++) {
            bandera = l2.verificarExiste(v[i]);
            if (bandera == false) {
                l2.insertar1en1(v[i]);
            }
        }
        for (int i = 1; i <= l2.obtenerCant(); i++) {
            cantidad = frecuencia(l2.obtenerElemento(i));
            l3.insertar1en1(cantidad);
        }
    }

    
    public boolean verificarExiste(int ele) {
        boolean bandera = false;
        for (int i = 1; i <= cant; i++) {
            if (ele == v[i]) {
                bandera = true;
                break;
            }
        }
        return bandera;

    }

    public String descargar() {
        String s = "|";
        for (int i = 1; i <= this.cant; i++) {
            s = s + v[i] + "|";
        }
        return s;
    }

    public static void main(String[] args) {
        ListaArreglo l1= new ListaArreglo();
        ListaArreglo l2= new ListaArreglo();
        ListaArreglo l3= new ListaArreglo();
        
        l1.insertar1en1(50);
        l1.insertar1en1(40);
        l1.insertar1en1(60);
        l1.insertar1en1(30);
        l1.insertar1en1(70);
        l1.insertar1en1(50);
        
        l1.insertar1en1(30);
        l1.insertar1en1(60);
        l1.insertar1en1(50);
        
        
        l1.insertar1en1(40);
        l1.insertar1en1(50);
        l1.insertar1en1(55);

        System.out.println(l1.descargar());
        
        l1.MetodoAuxiliar1(l2,l3);
        
        System.out.println(l2.descargar());
        System.out.println(l3.descargar());
    }
}


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package ProyectoExamenEd2Arboles_3_p3;

/**
 *
 * @author pumar
 */
public class Arbol {

    public Nodo raiz;
    public int n;

    public void insertar(ListaArreglo l2, ListaArreglo l3) {
        raiz = insertar(raiz, l2, l3);
    }

    public Nodo insertar(Nodo p, ListaArreglo l2, ListaArreglo l3) {
        for (int i = 1; i <= l2.obtenerCant(); i++) {
            if (p == null) {
                return new Nodo(l2.obtenerElemento(i), l3.obtenerElemento(i));
            } else {
                if (l2.obtenerElemento(i) < p.elem1) {
                    p.izq = insertar(p.izq, l2, l3);
                } else {
                    p.der = insertar(p.der, l2, l3);
                }
            }
        }
        return p;
    }

    public void insertarI(ListaArreglo l2, ListaArreglo l3) {
        for (int i = 1; i <= l2.obtenerCant(); i++) {
            if (raiz == null) {
                raiz = new Nodo(l2.obtenerElemento(i), l3.obtenerElemento(i));
            } else {
                Nodo ant = null;
                Nodo p = raiz;
                while (p != null) {
                    ant = p;
                    if (l2.obtenerElemento(i) < p.elem1) {
                        p = p.izq;
                    } else {
                        if (l2.obtenerElemento(i) > p.elem1) {
                            p = p.der;
                        } else {
                            return;
                        }
                    }
                }
                Nodo nuevo = new Nodo(l2.obtenerElemento(i), l3.obtenerElemento(i));
                if (l2.obtenerElemento(i) > ant.elem1) {
                    ant.der = nuevo;
                } else {
                    ant.izq = nuevo;
                }
            }
        }
    }

    public Arbol() {
        raiz = null;
    }

    public void inOrden() {
        inOrden(raiz);
    }

    public void inOrden(Nodo p) {
        if (p == null) {
            return;
        } else {
            inOrden(p.izq);
            System.out.println(p.elem1 + " " + p.elem2 + ", ");
            inOrden(p.der);
        }
    }

    public static void main(String[] args) {
        ListaArreglo l1 = new ListaArreglo();
        ListaArreglo l2 = new ListaArreglo();
        ListaArreglo l3 = new ListaArreglo();

        l1.insertar1en1(50);
        l1.insertar1en1(40);
        l1.insertar1en1(60);
        l1.insertar1en1(30);
        l1.insertar1en1(70);
        l1.insertar1en1(50);
        l1.insertar1en1(30);
        l1.insertar1en1(60);
        l1.insertar1en1(50);
        l1.insertar1en1(40);
        l1.insertar1en1(50);
        l1.insertar1en1(55);

        System.out.println(l1.descargar());

        l1.MetodoAuxiliar1(l2, l3);
        Arbol a = new Arbol();
        a.insertar(l2, l3);
        a.inOrden();
    }
}



