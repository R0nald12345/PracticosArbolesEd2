public class Nodo {
    public Nodo izq;
    public Nodo der;
    public int elem;

    public Nodo(int elem) {
        this.izq = null;
        this.der = null;
        this.elem = elem;
    }
    
    
}

public class ArbolABB {

    public Nodo raiz;

    public ArbolABB() {
        raiz = null;
    }

    /*Insertar*/
    public void insertar(int x) {
        raiz = insertar(raiz, x);
    }

    private Nodo insertar(Nodo p, int elem) {
        if (p == null) {
            return new Nodo(elem);
        }
        if (elem < p.elem) {
            p.izq = insertar(p.izq, elem);
        } else {
            p.der = insertar(p.der, elem);
        }
        return p;
    }
    
    public void inOrden(){
        inOrden(raiz);
    }
    
    private void inOrden(Nodo p){
        if(p==null){
            return;
        }else{
            inOrden(p.izq);
            System.out.println(p.elem);
            inOrden(p.der);
        }
    }

    public boolean isHoja(Nodo p) {
        return (p.izq == null && p.der == null);
    }

    //Verifica si un elemento x, se encuentra en el arbol
    public boolean seEncuentra(int x) {
        return seEncuentra(raiz, x);
    }

    private boolean seEncuentra(Nodo p, int x) {
        if (p == null) {
            return false;
        }
        if (isHoja(p)) {
            return (x == p.elem);
        }
        boolean i = seEncuentra(p.izq, x);
        boolean d = seEncuentra(p.der, x);
        if(i == true || d == true){
            return true;
        }
        if(p.elem == x){
            return true; 
        }else{
            return false;
        }
    }
    
    //Me retorna la cantidad de Nodos de un arbol
    public int cantidadNodos(){
        return cantidadNodos(raiz);
    }
    
    private int cantidadNodos(Nodo p){
        if(p == null){
            return 0;
        }
        if(isHoja(p)){
            return 1;
        }
        int i = cantidadNodos(p.izq);
        int d = cantidadNodos(p.der);
        return i+d+1;
    }
    
    
    public int suma(){
        return suma(raiz);
    }
    
    private int suma(Nodo p ){
        if( p == null){
            return 0;
        }
        if(isHoja(p)){
            return p.elem;
        }
        int i = 0;
        int d = 0;
        i = i + suma(p.izq);
        d  = d +  suma(p.der);
        return i + d + p.elem;
    }
    
    //Obtenemos el menor Numero del Nodo, si esta vacio el arbol nos retorna -1
    public int ObtenerMenor(){
        return ObtenerMenor(raiz);
    }
    
    private int ObtenerMenor(Nodo p){
        if(p == null){
            //throw new IllegalStateException("El árbol está vacío");
            return -1;
        }
        if(isHoja(p)){
            return p.elem;
        }
        int i = ObtenerMenor(p.izq);
        return i;
    }
    
     //Obtenemos el mayor Numero del Nodo, si esta vacio el arbol nos retorna -1
    public int ObtenerMayor(){
        return ObtenerMayor(raiz);
    }
    
    private int ObtenerMayor(Nodo p){
        if(p == null){
            //throw new IllegalStateException("El árbol está vacío");
            return -1;
        }
        if(isHoja(p)){
            return p.elem;
        }
        int d = ObtenerMayor(p.der);
        return d;
    }
    
    
    public void mostrarNivel() {
        mostrarNivel(raiz, 1);
    }
    
    private void mostrarNivel(Nodo p,int nivel){
        if(p==null){
            return;
        }
        mostrarNivel(p.izq,nivel+1);
        System.out.println(p.elem + " nivel: " + nivel);
        mostrarNivel(p.der, nivel+1);
    }

++++++++++++++++++++++++++++++++++++++++++++

    public void eliminarHojas() {
        eliminarHojas(raiz);
    }

    public Nodo eliminarHojas(Nodo p) {
        if (p == null) {
            return null;
        } else {
            if (isHoja(p)) {
                return null;
            } else {
                Nodo i = eliminarHojas(p.izq);
                p.izq = i;
                Nodo d = eliminarHojas(p.der);
                p.der = d;
                return p;
            }
        }
    }

    public int inmediatoSuperior(Nodo p) {
        if (p.izq == null) {
            return p.elem;
        } else {
            return inmediatoSuperior(p.izq);
        }
    }

    public Nodo eliminarNodo(Nodo p) {
        if (p.izq == null && p.der == null) {
            return null;
        }
        if (p.izq != null && p.der == null) {
            return p.izq;
        }
        if (p.izq == null && p.der != null) {
            return p.der;
        }
        int y = inmediatoSuperior(p.der);
        p.elem = y;
        p.der = eliminar(p.der, y);
        return p;
    }
    
//A1.eliminar(x) : Método que elimina el elemento x, del árbol A1.
    public void eliminar(int x) {
        raiz = eliminar(raiz, x);
    }

    public Nodo eliminar(Nodo p, int x) {
        if (p == null) {
            return null;
        }
        if (x == p.elem) {
            return eliminarNodo(p);
        }
        if (x < p.elem) {
            p.izq = eliminar(p.izq, x);
        } else {
            p.der = eliminar(p.der, x);
        }
        return p;
    }

    //A1.eliminarPares() : Método que elimina los elementos pares del árbol
    public void eliminarPar() {
        raiz = eliminarPar(raiz);
    }

    public Nodo eliminarPar(Nodo p) {
        if (p == null) {
            return null;
        }
        if (isHoja(p)) {
            if (p.elem % 2 == 0) {
                return eliminarNodo(p);
            } else {
                return p;
            }
        }
        p.izq = eliminarPar(p.izq);
        p.der = eliminarPar(p.der);
        if (p.elem % 2 == 0) {
            p = eliminarNodo(p);
        }
        
        return p;
    }
//A1.eliminar(L1) : Método que elimina los elementos de la lista L1 que se encuentran en el árbol A1.

    public void eliminar(ArrayList<Integer> a) {
        raiz = eliminar(raiz, a);
    }

    public Nodo eliminar(Nodo p, ArrayList<Integer> a) {
        if (p == null) {
            return null;
        }
        if (isHoja(p)) {
            for (int i = 0; i < a.size(); i++) {
                if (a.get(i) == p.elem) {
                    return eliminarNodo(p);
                }
            }
        }
        for (int i = 0; i < a.size(); i++) {
            if (p.elem == a.get(i)) {
                p = eliminarNodo(p);
            }
        }
        p.izq = eliminar(p.izq, a);
        p.der = eliminar(p.der, a);
        return p;

    }

    //obtener el menor elemento, caso contrario que no se encuentra retorna-1
 public int obtenerMenor(Nodo p) {
        if (p == null) {
            return -1;
        } else {
            if (isHoja(p)) {
                return p.elem;
            }
            int i = obtenerMayor(p.izq);
            int d = obtenerMayor(p.der);
            if (i < d) {
                return i;
            } else {
                return d;
            }
        }
    }
//A1.eliminarMenor(): Método que elimina el elemento menor del árbol A1.

    public void eliminarMenor() {
        int menor = obtenerMenor(raiz);
        eliminar(raiz, menor);
    }
    //Metodo que obtiene el mayor elemento del arbol

    private int obtenerMayor() {
        return obtenerMayor(raiz);
    }
    
    //Metodo auxiliar para eliminar numeros primos

       public boolean verificarPrimo(int x) {
        if (x == 1) {
            return false;
        } else {
            int divisor = 1;
            int residuo;
            boolean bandera;
                do
                {
                    divisor++;
                    residuo = x % divisor;
                } while (residuo != 0);
                //residuo = valorNumerico % divisor;
                if (x == divisor)
                {
                    bandera = true;
                }
                else
                {
                    bandera = false;
                }
                return bandera;
            }
            
        }


//A1.eliminarMayor(): Método que elimina el elemento mayor del árbol A1.
    public int obtenerMayor(Nodo p) {
        if (p == null) {
            return -1;
        } else {
            if (isHoja(p)) {
                return p.elem;
            }
            int i = obtenerMayor(p.izq);
            int d = obtenerMayor(p.der);
            return i > d ? i : d;

        }

    }
    
++++++++++++++++++++++++++++++++++++++++++++
    
    public static void main(String[] args) {
        ArbolABB a =  new ArbolABB();
        a.insertar(10);
        a.insertar(8);
        a.insertar(5);
        a.insertar(3);
        a.insertar(2);
        a.insertar(1);
        a.insertar(20);
        
        a.inOrden();
        System.out.println("Verificar si se encuentra el 10: " + a.seEncuentra(10));
        System.out.println("La cantidad de Nodos es: " + a.cantidadNodos());
        System.out.println("la suma de los Nodos es : " + a.suma());
        System.out.println("El menor dato del arbol es: " + a.ObtenerMenor());
        System.out.println("El mayor dato del arbol es: " + a.ObtenerMayor());
        System.out.println("Mostrar nivel:");
        a.mostrarNivel();
        
    }

}